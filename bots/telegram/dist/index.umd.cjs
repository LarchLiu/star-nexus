(function(a,T){typeof exports=="object"&&typeof module<"u"?module.exports=T():typeof define=="function"&&define.amd?define(T):(a=typeof globalThis<"u"?globalThis:a||self,a["telegram-bot"]=T())})(this,function(){"use strict";var yt=Object.defineProperty;var Nt=(a,T,d)=>T in a?yt(a,T,{enumerable:!0,configurable:!0,writable:!0,value:d}):a[T]=d;var k=(a,T,d)=>(Nt(a,typeof T!="symbol"?T+"":T,d),d);const a={API_KEY:null,CHAT_MODEL:"gpt-3.5-turbo",NOTION_API_KEY:null,NOTION_DATABASE_ID:null,PICTURE_BED_URL:null,TELEGRAM_AVAILABLE_TOKENS:[],TELEGRAM_BOT_NAME:[],I_AM_A_GENEROUS_PERSON:!1,CHAT_WHITE_LIST:[],CHAT_GROUP_WHITE_LIST:[],GROUP_CHAT_BOT_ENABLE:!0,GROUP_CHAT_BOT_SHARE_MODE:!1,AUTO_TRIM_HISTORY:!0,MAX_HISTORY_LENGTH:20,MAX_TOKEN_LENGTH:2048,GPT3_TOKENS_COUNT:!1,SYSTEM_INIT_MESSAGE:"You are a helpful assistant",SYSTEM_INIT_MESSAGE_ROLE:"system",ENABLE_USAGE_STATISTICS:!1,HIDE_COMMAND_BUTTONS:["/role"],UPDATE_BRANCH:"main",BUILD_TIMESTAMP:"1682652547",BUILD_VERSION:"ab9e57e",I18N:null,LANGUAGE:"zh-cn",DEBUG_MODE:!1,DEV_MODE:!1,TELEGRAM_API_DOMAIN:"https://api.telegram.org",OPENAI_API_DOMAIN:"https://api.openai.com"},T={PASSWORD_KEY:"chat_history_password",GROUP_TYPES:["group","supergroup"],USER_AGENT:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Safari/605.1.15"};let d=null,B=null;const ie={API_KEY:"string",NOTION_API_KEY:"string",NOTION_DATABASE_ID:"string",PICTURE_BED_URL:"string"};function ce(e,t){d=e.DATABASE,B=e.API_GUARD;for(const n in a)if(e[n])switch(ie[n]||typeof a[n]){case"number":a[n]=parseInt(e[n])||a[n];break;case"boolean":a[n]=(e[n]||"false")==="true";break;case"string":a[n]=e[n];break;case"object":if(Array.isArray(a[n]))a[n]=e[n].split(",");else try{a[n]=JSON.parse(e[n])}catch(r){console.error(r)}break;default:a[n]=e[n];break}e.TELEGRAM_TOKEN&&!a.TELEGRAM_AVAILABLE_TOKENS.includes(e.TELEGRAM_TOKEN)&&(e.BOT_NAME&&a.TELEGRAM_AVAILABLE_TOKENS.length===a.TELEGRAM_BOT_NAME.length&&a.TELEGRAM_BOT_NAME.push(e.BOT_NAME),a.TELEGRAM_AVAILABLE_TOKENS.push(e.TELEGRAM_TOKEN)),a.I18N=t((a.LANGUAGE||"cn").toLowerCase()),a.SYSTEM_INIT_MESSAGE=a.I18N.env.system_init_message}class le{constructor(){k(this,"USER_CONFIG",{SYSTEM_INIT_MESSAGE:a.SYSTEM_INIT_MESSAGE,OPENAI_API_EXTRA_PARAMS:{},OPENAI_API_KEY:null});k(this,"USER_DEFINE",{ROLE:{}});k(this,"CURRENT_CHAT_CONTEXT",{chat_id:null,reply_to_message_id:null,parse_mode:"Markdown"});k(this,"SHARE_CONTEXT",{currentBotId:null,currentBotToken:null,currentBotName:null,chatHistoryKey:null,configStoreKey:null,groupAdminKey:null,usageKey:null,chatType:null,chatId:null,speakerId:null,role:null})}_initChatContext(t,n){this.CURRENT_CHAT_CONTEXT.chat_id=t,this.CURRENT_CHAT_CONTEXT.reply_to_message_id=n,n&&(this.CURRENT_CHAT_CONTEXT.allow_sending_without_reply=!0)}async _initUserConfig(t){try{const n=JSON.parse(await d.get(t));for(const r in n)r==="USER_DEFINE"&&typeof this.USER_DEFINE==typeof n[r]?this._initUserDefine(n[r]):this.USER_CONFIG.hasOwnProperty(r)&&typeof this.USER_CONFIG[r]==typeof n[r]&&(this.USER_CONFIG[r]=n[r])}catch(n){console.error(n)}}_initUserDefine(t){for(const n in t)this.USER_DEFINE.hasOwnProperty(n)&&typeof this.USER_DEFINE[n]==typeof t[n]&&(this.USER_DEFINE[n]=t[n])}initTelegramContext(t){const{pathname:n}=new URL(t.url),r=n.match(/^\/telegram\/(\d+:[A-Za-z0-9_-]{35})\/webhook/)[1],o=a.TELEGRAM_AVAILABLE_TOKENS.indexOf(r);if(o===-1)throw new Error("Token not allowed");this.SHARE_CONTEXT.currentBotToken=r,this.SHARE_CONTEXT.currentBotId=r.split(":")[0],a.TELEGRAM_BOT_NAME.length>o&&(this.SHARE_CONTEXT.currentBotName=a.TELEGRAM_BOT_NAME[o])}async _initShareContext(t){var l,c,_;this.SHARE_CONTEXT.usageKey=`usage:${this.SHARE_CONTEXT.currentBotId}`;const n=(l=t==null?void 0:t.chat)==null?void 0:l.id;if(n==null)throw new Error("Chat id not found");const r=this.SHARE_CONTEXT.currentBotId;let o=`history:${n}`,s=`user_config:${n}`,i=null;r&&(o+=`:${r}`,s+=`:${r}`),T.GROUP_TYPES.includes((c=t.chat)==null?void 0:c.type)&&(!a.GROUP_CHAT_BOT_SHARE_MODE&&t.from.id&&(o+=`:${t.from.id}`,s+=`:${t.from.id}`),i=`group_admin:${n}`),this.SHARE_CONTEXT.chatHistoryKey=o,this.SHARE_CONTEXT.configStoreKey=s,this.SHARE_CONTEXT.groupAdminKey=i,this.SHARE_CONTEXT.chatType=(_=t.chat)==null?void 0:_.type,this.SHARE_CONTEXT.chatId=t.chat.id,this.SHARE_CONTEXT.speakerId=t.from.id||t.chat.id}async initContext(t){var o,s;const n=(o=t==null?void 0:t.chat)==null?void 0:o.id,r=T.GROUP_TYPES.includes((s=t.chat)==null?void 0:s.type)?t.message_id:null;this._initChatContext(n,r),await this._initShareContext(t),await this._initUserConfig(this.SHARE_CONTEXT.configStoreKey)}}async function V(e,t,n){return await fetch(`${a.TELEGRAM_API_DOMAIN}/bot${t}/sendMessage`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...n,text:e})})}async function _e(e,t,n){const r=n;if(e.length<=4096){const s=await V(e,t,r);if(s.status===200)return s}const o=4e3;r.parse_mode="HTML";for(let s=0;s<e.length;s+=o){const i=e.slice(s,s+o);await V(`<pre>
${i}
</pre>`,t,r)}return new Response("Message batch send",{status:200})}function u(e){return async t=>_e(t,e.SHARE_CONTEXT.currentBotToken,e.CURRENT_CHAT_CONTEXT)}async function ue(e,t,n){return await fetch(`${a.TELEGRAM_API_DOMAIN}/bot${t}/sendPhoto`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({...n,photo:e,parse_mode:null})})}function he(e){return t=>ue(t,e.SHARE_CONTEXT.currentBotToken,e.CURRENT_CHAT_CONTEXT)}async function pe(e,t,n){return await fetch(`${a.TELEGRAM_API_DOMAIN}/bot${t}/sendChatAction`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({chat_id:n,action:e})}).then(r=>r.json())}function X(e){return t=>pe(t,e.SHARE_CONTEXT.currentBotToken,e.CURRENT_CHAT_CONTEXT.chat_id)}async function me(e,t){return await fetch(`${a.TELEGRAM_API_DOMAIN}/bot${e}/setWebhook`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:t})}).then(n=>n.json())}async function de(e,t,n,r){let o;try{o=JSON.parse(await d.get(t))}catch(s){return console.error(s),s.message}if(!o||!Array.isArray(o)||o.length===0){const s=await fe(n,r);if(s==null)return null;o=s,await d.put(t,JSON.stringify(o),{expiration:Date.now()/1e3+120})}for(let s=0;s<o.length;s++){const i=o[s];if(i.user.id===e)return i.status}return"member"}function Ee(e){return t=>de(t,e.SHARE_CONTEXT.groupAdminKey,e.CURRENT_CHAT_CONTEXT.chat_id,e.SHARE_CONTEXT.currentBotToken)}async function fe(e,t){try{const n=await fetch(`${a.TELEGRAM_API_DOMAIN}/bot${t}/getChatAdministrators`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({chat_id:e})}).then(r=>r.json());if(n.ok)return n.result}catch(n){return console.error(n),null}}async function Te(e){const t=await fetch(`${a.TELEGRAM_API_DOMAIN}/bot${e}/getMe`,{method:"POST",headers:{"Content-Type":"application/json"}}).then(n=>n.json());return t.ok?{ok:!0,info:{name:t.result.first_name,bot_name:t.result.username,can_join_groups:t.result.can_join_groups,can_read_all_group_messages:t.result.can_read_all_group_messages}}:t}async function z(e,t){try{const n=await d.get(e);if(n&&n!=="")return n}catch(n){console.error(n)}try{const n=await fetch(t,{headers:{"User-Agent":T.USER_AGENT}}).then(r=>r.text());return await d.put(e,n),n}catch(n){console.error(n)}return null}async function Z(){const e="https://raw.githubusercontent.com/tbxark-archive/GPT-3-Encoder/master",t=await z("encoder_raw_file",`${e}/encoder.json`).then(p=>JSON.parse(p)),n=await z("bpe_raw_file",`${e}/vocab.bpe`),r=(p,m)=>Array.from(Array(m).keys()).slice(p),o=p=>p.charCodeAt(0),s=p=>String.fromCharCode(p),i=new TextEncoder("utf-8"),l=p=>Array.from(i.encode(p)).map(m=>m.toString()),c=(p,m)=>{const g={};return p.forEach((y,E)=>{g[p[E]]=m[E]}),g};function _(){const p=r(o("!"),o("~")+1).concat(r(o("¡"),o("¬")+1),r(o("®"),o("ÿ")+1));let m=p.slice(),g=0;for(let E=0;E<2**8;E++)p.includes(E)||(p.push(E),m.push(2**8+g),g=g+1);m=m.map(E=>s(E));const y={};return p.forEach((E,C)=>{y[p[C]]=m[C]}),y}function h(p){const m=new Set;let g=p[0];for(let y=1;y<p.length;y++){const E=p[y];m.add([g,E]),g=E}return m}const f=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,A={};Object.keys(t).forEach(p=>{A[t[p]]=p});const S=n.split(`
`),R=S.slice(1,S.length-1).map(p=>p.split(/(\s+)/).filter(m=>m.trim().length>0)),w=_(),W={};Object.keys(w).forEach(p=>{W[w[p]]=p});const v=c(R,r(0,R.length)),L=new Map;function At(p){if(L.has(p))return L.get(p);let m=p.split(""),g=h(m);if(!g)return p;for(;;){const y={};Array.from(g).forEach(b=>{const ae=v[b];y[isNaN(ae)?1e11:ae]=b});const E=y[Math.min(...Object.keys(y).map(b=>parseInt(b)))];if(!(E in v))break;const C=E[0],U=E[1];let M=[],N=0;for(;N<m.length;){const b=m.indexOf(C,N);if(b===-1){M=M.concat(m.slice(N));break}M=M.concat(m.slice(N,b)),N=b,m[N]===C&&N<m.length-1&&m[N+1]===U?(M.push(C+U),N=N+2):(M.push(m[N]),N=N+1)}if(m=M,m.length===1)break;g=h(m)}return m=m.join(" "),L.set(p,m),m}return function(m){let g=0;const y=Array.from(m.matchAll(f)).map(E=>E[0]);for(let E of y){E=l(E).map(U=>w[U]).join("");const C=At(E).split(" ").map(U=>t[U]);g+=C.length}return g}}function ge(e){const t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";let n="";for(let r=e;r>0;--r)n+=t[Math.floor(Math.random()*t.length)];return n}async function Ae(){let e=await d.get(T.PASSWORD_KEY);return e===null&&(e=ge(32),await d.put(T.PASSWORD_KEY,e)),e}function H(e){return`
<html>  
  <head>
    <title>ChatGPT-Telegram-Workers</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="ChatGPT-Telegram-Workers">
    <meta name="author" content="TBXark">
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        text-align: left;
        background-color: #fff;
      }
      h1 {
        margin-top: 0;
        margin-bottom: 0.5rem;
      }
      p {
        margin-top: 0;
        margin-bottom: 1rem;
      }
      a {
        color: #007bff;
        text-decoration: none;
        background-color: transparent;
      }
      a:hover {
        color: #0056b3;
        text-decoration: underline;
      }
      strong {
        font-weight: bolder;
      }
    </style>
  </head>
  <body>
    ${e}
  </body>
</html>
  `}function $(e){return JSON.stringify({message:e.message,stack:e.stack})}function Q(e,t,n){switch(typeof e[t]){case"number":e[t]=Number(n);break;case"boolean":e[t]=n==="true";break;case"string":e[t]=n;break;case"object":const r=JSON.parse(n);if(typeof r=="object"){e[t]=r;break}throw new Error(a.I18N.utils.not_supported_configuration);default:throw new Error(a.I18N.utils.not_supported_configuration)}}async function ye(){let e=t=>Array.from(t).length;try{a.GPT3_TOKENS_COUNT&&(e=await Z())}catch(t){console.error(t)}return t=>{try{return e(t)}catch(n){return console.error(n),Array.from(t).length}}}function q(e){return e===null?new Response("NOT HANDLED",{status:200}):e.status===200?e:new Response(e.body,{status:200,headers:{"Original-Status":e.status,...e.headers}})}async function Ne(e,t,n){var i;const r=n.USER_CONFIG.OPENAI_API_KEY||a.API_KEY,o={model:a.CHAT_MODEL,...n.USER_CONFIG.OPENAI_API_EXTRA_PARAMS,messages:[...t||[],{role:"user",content:e}]},s=await fetch(`${a.OPENAI_API_DOMAIN}/v1/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(o)}).then(l=>l.json());if((i=s.error)!=null&&i.message)throw a.DEV_MODE||a.DEV_MODE?new Error(`OpenAI API Error
> ${s.error.message}
Body: ${JSON.stringify(o)}`):new Error(`OpenAI API Error
> ${s.error.message}`);return setTimeout(()=>Ie(s.usage,n).catch(console.error),0),s.choices[0].message.content}async function Oe(e,t){var s;const n=t.USER_CONFIG.OPENAI_API_KEY||a.API_KEY,r={prompt:e,n:1,size:"512x512"},o=await fetch(`${a.OPENAI_API_DOMAIN}/v1/images/generations`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify(r)}).then(i=>i.json());if((s=o.error)!=null&&s.message)throw new Error(`OpenAI API Error
> ${o.error.message}`);return o.data[0].url}async function Se(e,t,n){const r=a.AUTO_TRIM_HISTORY&&a.MAX_HISTORY_LENGTH<=0,o=t.SHARE_CONTEXT.chatHistoryKey;let s=await Re(o,t);if(n){const _=n(s,e);s=_.history,e=_.text}const{real:i,original:l}=s,c=await Ne(e,i,t);return r||(l.push({role:"user",content:e||"",cosplay:t.SHARE_CONTEXT.role||""}),l.push({role:"assistant",content:c,cosplay:t.SHARE_CONTEXT.role||""}),await d.put(o,JSON.stringify(l)).catch(console.error)),c}async function Ie(e,t){if(!a.ENABLE_USAGE_STATISTICS)return;let n=JSON.parse(await d.get(t.SHARE_CONTEXT.usageKey));n||(n={tokens:{total:0,chats:{}}}),n.tokens.total+=e.total_tokens,n.tokens.chats[t.SHARE_CONTEXT.chatId]?n.tokens.chats[t.SHARE_CONTEXT.chatId]+=e.total_tokens:n.tokens.chats[t.SHARE_CONTEXT.chatId]=e.total_tokens,await d.put(t.SHARE_CONTEXT.usageKey,JSON.stringify(n))}async function Re(e,t){const n={role:"system",content:t.USER_CONFIG.SYSTEM_INIT_MESSAGE};if(a.AUTO_TRIM_HISTORY&&a.MAX_HISTORY_LENGTH<=0)return n.role=a.SYSTEM_INIT_MESSAGE_ROLE,{real:[n],original:[n]};let o=[];try{o=JSON.parse(await d.get(e))}catch(c){console.error(c)}(!o||!Array.isArray(o))&&(o=[]);let s=JSON.parse(JSON.stringify(o));t.SHARE_CONTEXT.role&&(o=o.filter(c=>t.SHARE_CONTEXT.role===c.cosplay)),o.forEach(c=>{delete c.cosplay});const i=await ye(),l=(c,_,h,f)=>{c.length>h&&(c=c.splice(c.length-h));let A=_;for(let S=c.length-1;S>=0;S--){const R=c[S];let w=0;if(R.content?w=i(R.content):R.content="",A+=w,A>f){c=c.splice(S+1);break}}return c};if(a.AUTO_TRIM_HISTORY&&a.MAX_HISTORY_LENGTH>0){const c=i(n.content),_=Math.max(Object.keys(t.USER_DEFINE.ROLE).length,1);o=l(o,c,a.MAX_HISTORY_LENGTH,a.MAX_TOKEN_LENGTH),s=l(s,c,a.MAX_HISTORY_LENGTH*_,a.MAX_TOKEN_LENGTH*_)}switch(o.length>0?o[0].role:""){case"assistant":case"system":o[0]=n;break;default:o.unshift(n)}return a.SYSTEM_INIT_MESSAGE_ROLE!=="system"&&o.length>0&&o[0].role==="system"&&(o[0].role=a.SYSTEM_INIT_MESSAGE_ROLE),{real:o,original:s}}const O={default(e){return T.GROUP_TYPES.includes(e)?["administrator","creator"]:!1},shareModeGroup(e){return T.GROUP_TYPES.includes(e)&&a.GROUP_CHAT_BOT_SHARE_MODE?["administrator","creator"]:!1}},I={"/help":{scopes:["all_private_chats","all_chat_administrators"],fn:be},"/new":{scopes:["all_private_chats","all_group_chats","all_chat_administrators"],fn:x,needAuth:O.shareModeGroup},"/start":{scopes:["all_private_chats","all_chat_administrators"],fn:x,needAuth:O.default},"/img":{scopes:["all_private_chats","all_chat_administrators"],fn:Ce,needAuth:O.shareModeGroup},"/version":{scopes:["all_private_chats","all_chat_administrators"],fn:Ue,needAuth:O.default},"/setenv":{scopes:[],fn:$e,needAuth:O.shareModeGroup},"/delenv":{scopes:[],fn:Me,needAuth:O.shareModeGroup},"/usage":{scopes:["all_private_chats","all_chat_administrators"],fn:He,needAuth:O.default},"/system":{scopes:["all_private_chats","all_chat_administrators"],fn:Pe,needAuth:O.default},"/role":{scopes:["all_private_chats"],fn:we,needAuth:O.shareModeGroup},"/redo":{scopes:["all_private_chats","all_group_chats","all_chat_administrators"],fn:Le,needAuth:O.shareModeGroup}};async function we(e,t,n,r){if(n==="show"){const h=Object.getOwnPropertyNames(r.USER_DEFINE.ROLE).length;if(h===0)return u(r)(a.I18N.command.role.not_defined_any_role);let f=a.I18N.command.role.current_defined_role(h);for(const A in r.USER_DEFINE.ROLE)r.USER_DEFINE.ROLE.hasOwnProperty(A)&&(f+=`~${A}:
<pre>`,f+=`${JSON.stringify(r.USER_DEFINE.ROLE[A])}
`,f+="</pre>");return r.CURRENT_CHAT_CONTEXT.parse_mode="HTML",u(r)(f)}const o=n.indexOf(" ");if(o===-1)return u(r)(a.I18N.command.role.help);const s=n.slice(0,o),i=n.slice(o+1).trim(),l=i.indexOf("=");if(l===-1){if(i==="del")try{if(r.USER_DEFINE.ROLE[s])return delete r.USER_DEFINE.ROLE[s],await d.put(r.SHARE_CONTEXT.configStoreKey,JSON.stringify(Object.assign(r.USER_CONFIG,{USER_DEFINE:r.USER_DEFINE}))),u(r)(a.I18N.command.role.delete_role_success)}catch(h){return u(r)(a.I18N.command.role.delete_role_error(h))}return u(r)(a.I18N.command.role.help)}const c=i.slice(0,l),_=i.slice(l+1);r.USER_DEFINE.ROLE[s]||(r.USER_DEFINE.ROLE[s]={SYSTEM_INIT_MESSAGE:a.SYSTEM_INIT_MESSAGE,OPENAI_API_EXTRA_PARAMS:{}});try{return Q(r.USER_DEFINE.ROLE[s],c,_),await d.put(r.SHARE_CONTEXT.configStoreKey,JSON.stringify(Object.assign(r.USER_CONFIG,{USER_DEFINE:r.USER_DEFINE}))),u(r)(a.I18N.command.role.update_role_success)}catch(h){return u(r)(a.I18N.command.role.update_role_error(h))}}async function Ce(e,t,n,r){if(n==="")return u(r)(a.I18N.command.img.help);try{setTimeout(()=>X(r)("upload_photo").catch(console.error),0);const o=await Oe(n,r);try{return he(r)(o)}catch{return u(r)(`${o}`)}}catch(o){return u(r)(`ERROR: ${o.message}`)}}async function be(e,t,n,r){const o=a.I18N.command.help.summary+Object.keys(I).map(s=>`${s}：${a.I18N.command.help[s.substring(1)]}`).join(`
`);return u(r)(o)}async function x(e,t,n,r){try{return await d.delete(r.SHARE_CONTEXT.chatHistoryKey),t==="/new"?u(r)(a.I18N.command.new.new_chat_start):r.SHARE_CONTEXT.chatType==="private"?u(r)(a.I18N.command.new.new_chat_start_private(r.CURRENT_CHAT_CONTEXT.chat_id)):u(r)(a.I18N.command.new.new_chat_start_group(r.CURRENT_CHAT_CONTEXT.chat_id))}catch(o){return u(r)(`ERROR: ${o.message}`)}}async function $e(e,t,n,r){const o=n.indexOf("=");if(o===-1)return u(r)(a.I18N.command.setenv.help);const s=n.slice(0,o),i=n.slice(o+1);try{return Q(r.USER_CONFIG,s,i),await d.put(r.SHARE_CONTEXT.configStoreKey,JSON.stringify(r.USER_CONFIG)),u(r)(a.I18N.command.setenv.update_config_success)}catch(l){return u(r)(a.I18N.command.setenv.update_config_error(l))}}async function Me(e,t,n,r){try{return r.USER_CONFIG[n]=null,await d.put(r.SHARE_CONTEXT.configStoreKey,JSON.stringify(r.USER_CONFIG)),u(r)(a.I18N.command.setenv.update_config_success)}catch(o){return u(r)(a.I18N.command.setenv.update_config_error(o))}}async function Ue(e,t,n,r){const o={headers:{"User-Agent":T.USER_AGENT}},s={ts:a.BUILD_TIMESTAMP,sha:a.BUILD_VERSION},i=`https://raw.githubusercontent.com/LarchLiu/star-nexus/${a.UPDATE_BRANCH}`,l=`${i}/dist/timestamp`,c=`${i}/dist/buildinfo.json`;let _=await fetch(c,o).then(h=>h.json()).catch(()=>null);if(_||(_=await fetch(l,o).then(h=>h.text()).then(h=>({ts:Number(h.trim()),sha:"unknown"})).catch(()=>({ts:0,sha:"unknown"}))),s.ts<_.ts){const h=a.I18N.command.version.new_version_found(s,_);return u(r)(h)}else{const h=a.I18N.command.version.current_is_latest_version(s);return u(r)(h)}}async function He(e,t,n,r){if(!a.ENABLE_USAGE_STATISTICS)return u(r)(a.I18N.command.usage.usage_not_open);const o=JSON.parse(await d.get(r.SHARE_CONTEXT.usageKey));let s=a.I18N.command.usage.current_usage;if(o!=null&&o.tokens){const{tokens:i}=o,l=Object.keys(i.chats||{}).sort((c,_)=>i.chats[_]-i.chats[c]);s+=a.I18N.command.usage.total_usage(i.total);for(let c=0;c<Math.min(l.length,30);c++)s+=`
  - ${l[c]}: ${i.chats[l[c]]} tokens`;l.length===0?s+="0 tokens":l.length>30&&(s+=`
  ...`)}else s+=a.I18N.command.usage.no_usage;return u(r)(s)}async function Pe(e,t,n,r){let o=`Current System Info:
`;if(o+=`OpenAI Model:${a.CHAT_MODEL}
`,a.DEV_MODE){const s={...r.SHARE_CONTEXT};s.currentBotToken="******",r.USER_CONFIG.OPENAI_API_KEY="******",o+="<pre>",o+=`USER_CONFIG: 
${JSON.stringify(r.USER_CONFIG,null,2)}
`,o+=`CHAT_CONTEXT: 
${JSON.stringify(r.CURRENT_CHAT_CONTEXT,null,2)}
`,o+=`SHARE_CONTEXT: 
${JSON.stringify(s,null,2)}
`,o+="</pre>"}return r.CURRENT_CHAT_CONTEXT.parse_mode="HTML",u(r)(o)}async function Le(e,t,n,r){setTimeout(()=>X(r)("typing").catch(console.error),0);const o=await Se(n,r,(s,i)=>{const{real:l,original:c}=s;let _=i;for(;;){const h=l.pop();if(c.pop(),h==null)break;if(h.role==="user"){(i===""||i===void 0||i===null)&&(_=h.content);break}}return{history:{real:l,original:c},text:_}});return u(r)(o)}async function ke(e,t,n,r){let o="<pre>";return o+=JSON.stringify({message:e},null,2),o+="</pre>",r.CURRENT_CHAT_CONTEXT.parse_mode="HTML",u(r)(o)}async function Ge(e,t){a.DEV_MODE&&(I["/echo"]={help:"[DEBUG ONLY] echo message",scopes:["all_private_chats","all_chat_administrators"],fn:ke,needAuth:O.default});for(const n in I)if(e.text===n||e.text.startsWith(`${n} `)){const r=I[n];try{if(r.needAuth){const s=r.needAuth(t.SHARE_CONTEXT.chatType);if(s){const i=await Ee(t)(t.SHARE_CONTEXT.speakerId);if(i===null)return u(t)(a.I18N.command.permission.not_authorized);if(!s.includes(i)){const l=a.I18N.command.permission.not_enough_permission(s,i);return u(t)(l)}}}}catch(s){return u(t)(a.I18N.command.permission.role_error(s))}const o=e.text.substring(n.length).trim();try{return await r.fn(e,n,o,t)}catch(s){return u(t)(a.I18N.command.permission.command_error(s))}}return null}async function De(e){const t={all_private_chats:[],all_group_chats:[],all_chat_administrators:[]};for(const r in I)if(!a.HIDE_COMMAND_BUTTONS.includes(r)&&I.hasOwnProperty(r)&&I[r].scopes)for(const o of I[r].scopes)t[o]||(t[o]=[]),t[o].push(r);const n={};for(const r in t)n[r]=await fetch(`https://api.telegram.org/bot${e}/setMyCommands`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({commands:t[r].map(o=>({command:o,description:a.I18N.command.help[o.substring(1)]||""})),scope:{type:r}})}).then(o=>o.json());return{ok:!0,result:n}}function ve(){return Object.keys(I).map(e=>({command:e,description:a.I18N.command.help[e.substring(1)]}))}async function G(e,t,n,r=!0){var o;try{const s={method:"GET",headers:t};n&&Object.keys(n).length&&(e+=`?${new URLSearchParams(n).toString()}`);const i=await fetch(e,s);if(!i.ok){let _=i.statusText;const h=i.headers.get("content-type");if(h&&h.includes("application/json")){const f=await i.json();_=((o=f.error)==null?void 0:o.message)||f.message||i.statusText}else h&&h.includes("text/")&&(_=await i.text());if(!r)return{error:_};throw new Error(_)}let l=i;const c=i.headers.get("content-type");return c&&c.includes("application/json")?l=await i.json():c&&c.includes("text/")&&(l=await i.text()),l}catch(s){throw new Error(s.message)}}async function P(e,t,n,r,o=!0){var s;try{const i={method:r?"PATCH":"POST",headers:t,body:n?JSON.stringify(n):void 0},l=await fetch(e,i);if(!l.ok){let h=l.statusText;const f=l.headers.get("content-type");if(f&&f.includes("application/json")){const A=await l.json();h=((s=A.error)==null?void 0:s.message)||A.message||l.statusText}else f&&f.includes("text/")&&(h=await l.text());if(!o)return{error:h};throw new Error(h)}let c=l;const _=l.headers.get("content-type");return _&&_.includes("application/json")?c=await l.json():_&&_.includes("text/")&&(c=await l.text()),c}catch(i){throw new Error(i.message)}}function Be(e){const t=e.match(/https?:\/\/([^/]+)\/?/i);let n="";return t&&t[1]&&(n=t[1]),n}async function Xe(e,t,n={"User-Agent":We}){let r="",o="";const s={domain:K,website:"Github"},i=/https:\/\/github.com\/([^\/]*\/[^\/]*)/g.exec(e),l=i?i[1]:"";try{if(l){const c=await G(`${ee}/${l}`,n),_=await G(`${ee}/${l}/languages`,n),h=await G(`${je}/${l}/${c.default_branch}/README.md`,n,void 0,!1),f=h.error?"":h,A=c.description?c.description.replace(/:\w+:/g," "):"";r=c.full_name+(A?`: ${A}`:""),e=c.html_url;const S=c.topics;S&&S.length>0&&(s.tags=S),_&&(s.languages=Object.keys(_));const R=t||Ye;if(R){const w=c.owner.login,W=c.name,v=`${R}?username=${w}&reponame=${W}&stargazers_count=${c.stargazers_count}&language=${c.language}&issues=${c.open_issues_count}&forks=${c.forks_count}&description=${A}`,L=await G(v);s.socialPreview=L.url}o=`${r}

${f}`,o.length>1e3&&(o=o.substring(0,1e3),o+="...")}else return{error:"Github error: Not supported website."};return{data:{title:r,url:e,content:o,meta:s}}}catch(c){return{error:`Github error: ${c}`}}}const K="github.com",Ke={}.VITE_GITHUB_API_HOST||"https://api.github.com",ee=`${Ke}/repos`,je={}.VITE_GITHUB_RAW_HOST||"https://raw.githubusercontent.com",Ye={}.VITE_PICTURE_BED,D={}.VITE_NOTION_API_URL||"https://api.notion.com/v1",Fe={}.VITE_OPENAI_API_HOST||"https://api.openai.com/v1",Je=`Summarize this Document first and then Categorize it. The Document is the *Markdown* format. In summary within 200 words. Categories with less than 5 items. Category names should be divided by a comma. Return the summary first and then the categories like this:

Summary: my summary.

Categories: XXX, YYY

The Document is: 

`,We="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Safari/605.1.15",te={[K]:{loader:Xe}};async function Ve(e,t,n){let r={};const o=Be(e);return te[o]?r=await te[o].loader(e,t,n):r.error="StarNexus error: Not supported website.",r}async function ze(e,t){try{let n="",r="",o=(await P(`${Fe}/chat/completions`,{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},{model:"gpt-3.5-turbo",messages:[{role:"system",content:Je},{role:"user",content:t.content}],max_tokens:400,temperature:.5})).choices[0].message.content;o=o.replace(/\n/g,"");const s=/Summary:(.*)Categories:/g,i=/Categories:(.*)$/g,l=s.exec(o),c=i.exec(o);l&&(n=l[1].trim()),c&&(r=c[1].trim());const _=(r||"Others").split(",");return{data:{summary:n,categories:_}}}catch(n){return{error:`Openai API error: ${n}`}}}async function Ze(e,t){try{let n=[{name:"Others"}];n=t.categories.map(_=>(_.endsWith(".")&&(_=_.slice(0,-1)),{name:_}));const r={parent:{database_id:t.databaseId},properties:{Title:{title:[{text:{content:t.title}}]},Summary:{rich_text:[{text:{content:t.summary}}]},URL:{url:t.url},Categories:{multi_select:n},Status:{select:{name:"Starred"}}}};let o="";if(t.meta&&Object.keys(t.meta).length>0&&t.meta.domain===K){const _=t.meta;if(r.properties={...r.properties,Website:{select:{name:t.meta.website}}},_.languages){const h=_.languages.map(f=>({name:f}));r.properties={...r.properties,Languages:{multi_select:h}}}if(_.tags){const h=_.tags.map(f=>({name:f}));r.properties={...r.properties,Tags:{multi_select:h}}}_.socialPreview&&(o=_.socialPreview)}const s=await P(`${D}/databases/${t.databaseId}/query`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${e}`},{filter:{property:"URL",rich_text:{contains:t.url}}});let i="",l=!1;if(s.results.length>0&&(s.results[0].properties.Status.select.name==="Starred"&&(l=!0),i=s.results[0].id),i)return r.properties={...r.properties,Status:{select:{name:l?"Unstarred":"Starred"}}},await P(`${D}/pages/${i}`,{Authorization:`Bearer ${e}`,"Notion-Version":"2022-06-28","Content-Type":"application/json"},r,!0),{data:{starred:!l,notionPageId:i}};if(i=(await P(`${D}/pages`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${e}`},r)).id,!o)return{data:{starred:!l,notionPageId:i}};const c={object:"block",type:"image",image:{type:"external",external:{url:o}}};return await P(`${D}/blocks/${i}/children`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${e}`},{children:[c]},!0),{data:{starred:!l,notionPageId:i}}}catch(n){return{error:`Notion API error: ${n}`}}}async function Qe(e){const t=/https?:\/\/(github.com|twitter.com|m.weibo.cn)\/[-A-Za-z0-9+&@#\/%?=~_|!:,.;]+[-A-Za-z0-9+&@#\/%=~_|]/g,n=e.match(t),r=[];if(n)for(let o=0;o<n.length;o++){const s=n[o],i=await Ve(s,a.PICTURE_BED_URL);r.push(i)}return r}async function qe(e){let t="",n=["Others"];const r=a.NOTION_API_KEY,o=a.NOTION_DATABASE_ID,s=a.API_KEY;if(!r||!o)return{error:"Missing Notion API key or Database ID in settings."};if(s){const{data:c,error:_}=await ze(s,e);if(_)return{error:_};t=c.summary,n=c.categories}else t=e.content;const i={databaseId:o,title:e.title,summary:t,url:e.url,categories:n,status:"Starred",meta:e.meta},{error:l}=await Ze(r,i);return l?{error:l}:{message:"success"}}async function xe(e,t){try{await t.initContext(e)}catch(n){return new Response($(n),{status:200})}return null}async function et(e,t){if(a.DEBUG_MODE){const n=`last_message:${t.SHARE_CONTEXT.chatHistoryKey}`;await d.put(n,JSON.stringify(e),{expirationTtl:3600})}return null}async function tt(e,t){return a.API_KEY?d?null:u(t)("DATABASE Not Set"):u(t)("OpenAI API Key Not Set")}async function j(e,t){return a.I_AM_A_GENEROUS_PERSON?null:t.SHARE_CONTEXT.chatType==="private"?a.CHAT_WHITE_LIST.includes(`${t.CURRENT_CHAT_CONTEXT.chat_id}`)?null:u(t)(a.I18N.message.user_has_no_permission_to_use_the_bot(t.CURRENT_CHAT_CONTEXT.chat_id)):T.GROUP_TYPES.includes(t.SHARE_CONTEXT.chatType)?a.GROUP_CHAT_BOT_ENABLE?a.CHAT_GROUP_WHITE_LIST.includes(`${t.CURRENT_CHAT_CONTEXT.chat_id}`)?null:u(t)(a.I18N.message.group_has_no_permission_to_use_the_bot(t.CURRENT_CHAT_CONTEXT.chat_id)):new Response("Not support",{status:401}):u(t)(a.I18N.message.not_supported_chat_type(t.SHARE_CONTEXT.chatType))}async function nt(e,t){return e.text?null:u(t)(a.I18N.message.not_supported_chat_type_message)}async function ne(e,t){if(!e.text)return new Response("Non text message",{status:200});const n=t.SHARE_CONTEXT.currentBotName;if(n){let r=!1;if(e.reply_to_message&&e.reply_to_message.from.username===n&&(r=!0),e.entities){let o="",s=0;e.entities.forEach(i=>{switch(i.type){case"bot_command":if(!r){const l=e.text.substring(i.offset,i.offset+i.length);l.endsWith(n)&&(r=!0);const c=l.replaceAll(`@${n}`,"").replaceAll(n,"").trim();o+=c,s=i.offset+i.length}break;case"mention":case"text_mention":if(!r){const l=e.text.substring(i.offset,i.offset+i.length);(l===n||l===`@${n}`)&&(r=!0)}o+=e.text.substring(s,i.offset),s=i.offset+i.length;break}}),o+=e.text.substring(s,e.text.length),e.text=o.trim()}return r?null:new Response("No mentioned",{status:200})}return new Response("Not set bot name",{status:200})}async function Y(e,t){return await Ge(e,t)}async function F(e,t){if(!e.text.startsWith("~"))return null;e.text=e.text.slice(1);const n=e.text.indexOf(" ");if(n===-1)return null;const r=e.text.slice(0,n),o=e.text.slice(n+1).trim();if(t.USER_DEFINE.ROLE.hasOwnProperty(r)){t.SHARE_CONTEXT.role=r,e.text=o;const s=t.USER_DEFINE.ROLE[r];for(const i in s)t.USER_CONFIG.hasOwnProperty(i)&&typeof t.USER_CONFIG[i]==typeof s[i]&&(t.USER_CONFIG[i]=s[i])}}async function rt(e,t){try{setTimeout(()=>X(t)("typing").catch(console.error),0);const n=await Qe(e.text);if(n.length===0)return u(t)("No supported website.");for(let r=0;r<n.length;r++){const o=n[r];if(o.error)return u(t)(o.error);const s=await qe(o.data);if(s.error)return u(t)(s.error)}return u(t)("Saved to Notion 🎉")}catch(n){return u(t)(`Error: ${n.message}`)}}async function ot(e,t){const n={private:[j,nt,Y,F],group:[ne,j,Y,F],supergroup:[ne,j,Y,F]};if(!n.hasOwnProperty(t.SHARE_CONTEXT.chatType))return u(t)(a.I18N.message.not_supported_chat_type(t.SHARE_CONTEXT.chatType));const r=n[t.SHARE_CONTEXT.chatType];for(const o of r)try{const s=await o(e,t);if(s&&s instanceof Response)return s}catch(s){return console.error(s),u(t)(a.I18N.message.handle_chat_type_message_error(t.SHARE_CONTEXT.chatType))}return null}async function st(e,t){const n=await e.json();if(a.DEV_MODE&&setTimeout(()=>{d.put(`log:${new Date().toISOString()}`,JSON.stringify(n),{expirationTtl:600}).catch(console.error)}),n.edited_message)throw new Error("Ignore edited message");if(n.message)return n.message;throw new Error("Invalid message")}async function at(e){const t=new le;t.initTelegramContext(e);const n=await st(e),r=[xe,et,tt,ot,rt];for(const o of r)try{const s=await o(n,t);if(s&&s instanceof Response)return s}catch(s){return console.error(s),new Response($(s),{status:500})}return null}const re="https://github.com/TBXark/ChatGPT-Telegram-Workers/blob/master/doc/DEPLOY.md",oe="https://github.com/TBXark/ChatGPT-Telegram-Workers/issues",it="./init",J=`
<br/>
<p>For more information, please visit <a href="${re}">${re}</a></p>
<p>If you have any questions, please visit <a href="${oe}">${oe}</a></p>
`;function se(e){return`<p style="color: red">Please set the <strong>${e}</strong> environment variable in Cloudflare Workers.</p> `}async function ct(e){const t=[],n=new URL(e.url).host,r=B?"safehook":"webhook";for(const s of a.TELEGRAM_AVAILABLE_TOKENS){const i=`https://${n}/telegram/${s.trim()}/${r}`,l=s.split(":")[0];t[l]={webhook:await me(s,i).catch(c=>$(c)),command:await De(s).catch(c=>$(c))}}const o=H(`
    <h1>ChatGPT-Telegram-Workers</h1>
    <h2>${n}</h2>
    ${a.TELEGRAM_AVAILABLE_TOKENS.length===0?se("TELEGRAM_AVAILABLE_TOKENS"):""}
    ${Object.keys(t).map(s=>`
        <br/>
        <h4>Bot ID: ${s}</h4>
        <p style="color: ${t[s].webhook.ok?"green":"red"}">Webhook: ${JSON.stringify(t[s].webhook)}</p>
        <p style="color: ${t[s].command.ok?"green":"red"}">Command: ${JSON.stringify(t[s].command)}</p>
        `).join("")}
      ${J}
    `);return new Response(o,{status:200,headers:{"Content-Type":"text/html"}})}async function lt(e){const t=await Ae(),{pathname:n}=new URL(e.url),r=n.match(/^\/telegram\/(.+)\/history/)[1];if(new URL(e.url).searchParams.get("password")!==t)return new Response("Password Error",{status:401});const i=JSON.parse(await d.get(r)),l=H(`
        <div id="history" style="width: 100%; height: 100%; overflow: auto; padding: 10px;">
            ${i.map(c=>`
                <div style="margin-bottom: 10px;">
                    <hp style="font-size: 16px; color: #999; margin-bottom: 5px;">${c.role}:</hp>
                    <p style="font-size: 12px; color: #333;">${c.content}</p>
                </div>
            `).join("")}
        </div>
  `);return new Response(l,{status:200,headers:{"Content-Type":"text/html"}})}async function _t(e){try{return q(await at(e))}catch(t){return console.error(t),new Response($(t),{status:200})}}async function ut(e){try{const t=new URL(e.url);return t.pathname=t.pathname.replace("/safehook","/webhook"),e=new Request(t,e),q(B.fetch(e))}catch(t){return console.error(t),new Response($(t),{status:200})}}async function ht(){const e=H(`
    <h1>ChatGPT-Telegram-Workers</h1>
    <br/>
    <p>Deployed Successfully!</p>
    <p> Version (ts:${a.BUILD_TIMESTAMP},sha:${a.BUILD_VERSION})</p>
    <br/>
    <p>You must <strong><a href="${it}"> >>>>> click here <<<<< </a></strong> to bind the webhook.</p>
    <br/>
    ${a.API_KEY?"":se("API_KEY")}
    <p>After binding the webhook, you can use the following commands to control the bot:</p>
    ${ve().map(t=>`<p><strong>${t.command}</strong> - ${t.description}</p>`).join("")}
    <br/>
    <p>You can get bot information by visiting the following URL:</p>
    <p><strong>/telegram/:token/bot</strong> - Get bot information</p>
    ${J}
  `);return new Response(e,{status:200,headers:{"Content-Type":"text/html"}})}async function pt(e){const t=new URL(e.url).searchParams.get("text")||"Hello World",n=await Z(),r=H(`
    <h1>ChatGPT-Telegram-Workers</h1>
    <br/>
    <p>Token Counter:</p>
    <p>source text: ${t}</p>
    <p>token count: ${n(t)}</p>
    <br/>
    `);return new Response(r,{status:200,headers:{"Content-Type":"text/html"}})}async function mt(){const e=[];for(const n of a.TELEGRAM_AVAILABLE_TOKENS){const r=n.split(":")[0];e[r]=await Te(n)}const t=H(`
    <h1>ChatGPT-Telegram-Workers</h1>
    <br/>
    <h4>Environment About Bot</h4>
    <p><strong>GROUP_CHAT_BOT_ENABLE:</strong> ${a.GROUP_CHAT_BOT_ENABLE}</p>
    <p><strong>GROUP_CHAT_BOT_SHARE_MODE:</strong> ${a.GROUP_CHAT_BOT_SHARE_MODE}</p>
    <p><strong>TELEGRAM_BOT_NAME:</strong> ${a.TELEGRAM_BOT_NAME.join(",")}</p>
    ${Object.keys(e).map(n=>`
            <br/>
            <h4>Bot ID: ${n}</h4>
            <p style="color: ${e[n].ok?"green":"red"}">${JSON.stringify(e[n])}</p>
            `).join("")}
    ${J}
  `);return new Response(t,{status:200,headers:{"Content-Type":"text/html"}})}async function dt(e){const{pathname:t}=new URL(e.url);if(t==="/")return ht();if(t.startsWith("/init"))return ct(e);if(t.startsWith("/telegram")&&t.endsWith("/webhook"))return _t(e);if(t.startsWith("/telegram")&&t.endsWith("/safehook"))return ut(e);if(a.DEV_MODE||a.DEBUG_MODE){if(t.startsWith("/telegram")&&t.endsWith("/history"))return lt(e);if(t.startsWith("/gpt3/tokens/test"))return pt(e);if(t.startsWith("/telegram")&&t.endsWith("/bot"))return mt()}return null}const Et={env:{system_init_message:"你是一个得力的助手"},utils:{not_supported_configuration:"不支持的配置项或数据类型错误"},message:{not_supported_chat_type:e=>`暂不支持${e}类型的聊天`,not_supported_chat_type_message:"暂不支持非文本格式消息",handle_chat_type_message_error:e=>`处理${e}类型的聊天消息出错`,user_has_no_permission_to_use_the_bot:e=>`你没有权限使用这个bot, 请请联系管理员添加你的ID(${e})到白名单`,group_has_no_permission_to_use_the_bot:e=>`该群未开启聊天权限, 请请联系管理员添加群ID(${e})到白名单`},command:{help:{summary:`当前支持以下命令:
`,help:"获取命令帮助",new:"发起新的对话",start:"获取你的ID, 并发起新的对话",img:"生成一张图片, 命令完整格式为 `/img 图片描述`, 例如`/img 月光下的沙滩`",version:"获取当前版本号, 判断是否需要更新",setenv:"设置用户配置，命令完整格式为 /setenv KEY=VALUE",delenv:"删除用户配置，命令完整格式为 /delenv KEY",usage:"获取当前机器人的用量统计",system:"查看当前一些系统信息",role:"设置预设的身份",redo:"重做上一次的对话, /redo 加修改过的内容 或者 直接 /redo",echo:"回显消息"},role:{not_defined_any_role:"还未定义任何角色",current_defined_role:e=>`当前已定义的角色如下(${e}):
`,help:"格式错误: 命令完整格式为 `/role 操作`\n当前支持以下`操作`:\n `/role show` 显示当前定义的角色.\n `/role 角色名 del` 删除指定名称的角色.\n `/role 角色名 KEY=VALUE` 设置指定角色的配置.\n  目前以下设置项:\n   `SYSTEM_INIT_MESSAGE`:初始化消息\n   `OPENAI_API_EXTRA_PARAMS`:OpenAI API 额外参数，必须为JSON",delete_role_success:"删除角色成功",delete_role_error:e=>`删除角色错误: \`${e.message}\``,update_role_success:"更新配置成功",update_role_error:e=>`配置项格式错误: \`${e.message}\``},img:{help:"请输入图片描述。命令完整格式为 `/img 狸花猫`"},new:{new_chat_start:"新的对话已经开始",new_chat_start_private:e=>`新的对话已经开始，你的ID(${e})`,new_chat_start_group:e=>`新的对话已经开始，群组ID(${e})`},setenv:{help:"配置项格式错误: 命令完整格式为 /setenv KEY=VALUE",update_config_success:"更新配置成功",update_config_error:e=>`配置项格式错误: ${e.message}`},version:{new_version_found:(e,t)=>`发现新版本，当前版本: ${JSON.stringify(e)}，最新版本: ${JSON.stringify(t)}`,current_is_latest_version:e=>`当前已经是最新版本, 当前版本: ${JSON.stringify(e)}`},usage:{usage_not_open:"当前机器人未开启用量统计",current_usage:`📊 当前机器人用量

Tokens:
`,total_usage:e=>`- 总用量：${e||0} tokens
- 各聊天用量：`,no_usage:"- 暂无用量"},permission:{not_authorized:"身份权限验证失败",not_enough_permission:(e,t)=>`权限不足,需要${e.join(",")},当前:${t}`,role_error:e=>`身份验证出错:${e.message}`,command_error:e=>`命令执行错误: ${e.message}`}}},ft={env:{system_init_message:"你是一個得力的助手"},utils:{not_supported_configuration:"不支持的配置或數據類型錯誤"},message:{not_supported_chat_type:e=>`當前不支持${e}類型的聊天`,not_supported_chat_type_message:"當前不支持非文本格式消息",handle_chat_type_message_error:e=>`處理${e}類型的聊天消息出錯`,user_has_no_permission_to_use_the_bot:e=>`您沒有權限使用本機器人，請聯繫管理員將您的ID(${e})添加到白名單中`,group_has_no_permission_to_use_the_bot:e=>`該群組未開啟聊天權限，請聯繫管理員將該群組ID(${e})添加到白名單中`},command:{help:{summary:`當前支持的命令如下：
`,help:"獲取命令幫助",new:"開始一個新對話",start:"獲取您的ID並開始一個新對話",img:"生成圖片，完整命令格式為`/img 圖片描述`，例如`/img 海灘月光`",version:"獲取當前版本號確認是否需要更新",setenv:"設置用戶配置，完整命令格式為/setenv KEY=VALUE",delenv:"刪除用戶配置，完整命令格式為/delenv KEY",usage:"獲取機器人當前的使用情況統計",system:"查看一些系統信息",role:"設置預設身份",redo:"重做上一次的對話 /redo 加修改過的內容 或者 直接 /redo",echo:"回显消息"},role:{not_defined_any_role:"尚未定義任何角色",current_defined_role:e=>`當前已定義的角色如下(${e})：
`,help:"格式錯誤：完整命令格式為`/role 操作`\n當前支持的`操作`如下：\n `/role show` 查看當前已定義的角色。\n `/role 角色名 del` 刪除指定的角色。\n `/role 角色名 KEY=VALUE` 設置指定角色的配置。\n  當前支持的設置如下：\n   `SYSTEM_INIT_MESSAGE`：初始化消息\n   `OPENAI_API_EXTRA_PARAMS`：OpenAI API額外參數，必須為JSON",delete_role_success:"刪除角色成功",delete_role_error:e=>`刪除角色出錯：\`${e.message}\``,update_role_success:"更新配置成功",update_role_error:e=>`配置項格式錯誤：\`${e.message}\``},img:{help:"請輸入圖片描述。完整命令格式為`/img raccoon cat`"},new:{new_chat_start:"開始一個新對話",new_chat_start_private:e=>`開始一個新對話，您的ID(${e})`,new_chat_start_group:e=>`開始一個新對話，群組ID(${e})`},setenv:{help:"配置項格式錯誤：完整命令格式為/setenv KEY=VALUE",update_config_success:"更新配置成功",update_config_error:e=>`配置項格式錯誤：\`${e.message}\``},version:{new_version_found:(e,t)=>`發現新版本，當前版本：${JSON.stringify(e)}，最新版本：${JSON.stringify(t)}`,current_is_latest_version:e=>`當前已是最新版本，當前版本：${JSON.stringify(e)}`},usage:{usage_not_open:"當前機器人未開啟使用情況統計",current_usage:`📊 當前機器人使用情況

使用情況：
`,total_usage:e=>`- 總計：${e||0} 次
- 每個群組使用情況： `,no_usage:"- 暫無使用情況"},permission:{not_authorized:"身份權限驗證失敗",not_enough_permission:(e,t)=>`權限不足，需要${e.join(",")}，當前：${t}`,role_error:e=>`身份驗證出錯：${e.message}`,command_error:e=>`命令執行出錯：${e.message}`}}},Tt={env:{system_init_message:"You are a helpful assistant"},utils:{not_supported_configuration:"Not supported configuration or data type error"},message:{not_supported_chat_type:e=>`Currently not supported ${e} type of chat`,not_supported_chat_type_message:"Currently not supported non-text format messages",handle_chat_type_message_error:e=>`Error handling ${e} type of chat messages`,user_has_no_permission_to_use_the_bot:e=>`You do not have permission to use this bot, please contact the administrator to add your ID (${e}) to the whitelist`,group_has_no_permission_to_use_the_bot:e=>`The group has not enabled chat permissions, please contact the administrator to add the group ID (${e}) to the whitelist`},command:{help:{summary:`The following commands are currently supported:
`,help:"Get command help",new:"Start a new conversation",start:"Get your ID and start a new conversation",img:"Generate an image, the complete command format is `/img image description`, for example `/img beach at moonlight`",version:"Get the current version number to determine whether to update",setenv:"Set user configuration, the complete command format is /setenv KEY=VALUE",delenv:"Delete user configuration, the complete command format is /delenv KEY",usage:"Get the current usage statistics of the robot",system:"View some system information",role:"Set the preset identity",redo:"Redo the last conversation, /redo with modified content or directly /redo",echo:"Echo the message"},role:{not_defined_any_role:"No roles have been defined yet",current_defined_role:e=>`The following roles are currently defined (${e}):
`,help:"Format error: the complete command format is `/role operation`\nThe following `operation` is currently supported:\n `/role show` Display the currently defined roles.\n `/role role name del` Delete the specified role.\n `/role role name KEY=VALUE` Set the configuration of the specified role.\n  The following settings are currently supported:\n   `SYSTEM_INIT_MESSAGE`: Initialization message\n   `OPENAI_API_EXTRA_PARAMS`: OpenAI API extra parameters, must be JSON",delete_role_success:"Delete role successfully",delete_role_error:e=>`Delete role error: \`${e.message}\``,update_role_success:"Update configuration successfully",update_role_error:e=>`Configuration item format error: \`${e.message}\``},img:{help:"Please enter the image description. The complete command format is `/img raccoon cat`"},new:{new_chat_start:"A new conversation has started",new_chat_start_private:e=>`A new conversation has started, your ID (${e})`,new_chat_start_group:e=>`A new conversation has started, group ID (${e})`},setenv:{help:"Configuration item format error: the complete command format is /setenv KEY=VALUE",update_config_success:"Update configuration successfully",update_config_error:e=>`Configuration item format error: ${e.message}`},version:{new_version_found:(e,t)=>`New version found, current version: ${JSON.stringify(e)}, latest version: ${JSON.stringify(t)}`,current_is_latest_version:e=>`Current is the latest version, current version: ${JSON.stringify(e)}`},usage:{usage_not_open:"The current robot is not open for usage statistics",current_usage:`📊 Current robot usage

Tokens:
`,total_usage:e=>`- Total: ${e||0} tokens
- Per chat usage: `,no_usage:"- No usage"},permission:{not_authorized:"Identity permission verification failed",not_enough_permission:(e,t)=>`Insufficient permissions, need ${e.join(",")}, current: ${t}`,role_error:e=>`Identity verification error: ${e.message}`,command_error:e=>`Command execution error: ${e.message}`}}};function gt(e){switch(e.toLowerCase()){case"cn":case"zh-cn":case"zh-hans":return Et;case"zh-tw":case"zh-hk":case"zh-mo":case"zh-hant":return ft;case"en":case"en-us":return Tt}}return{async fetch(e,t){try{return ce(t,gt),await dt(e)||new Response("NOTFOUND",{status:404})}catch(n){return console.error(n),new Response($(n),{status:500})}}}});
