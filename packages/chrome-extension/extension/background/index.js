async function I(t,e,a,r=!0){var u;try{const i={method:"GET",headers:e};a&&Object.keys(a).length&&(t+=`?${new URLSearchParams(a).toString()}`);const o=await fetch(t,i);if(!o.ok){let c=o.statusText;const d=o.headers.get("content-type");if(d&&d.includes("application/json")){const l=await o.json();c=((u=l.error)==null?void 0:u.message)||l.message||o.statusText}else d&&d.includes("text/")&&(c=await o.text());if(!r)return{error:c};throw new Error(c)}let s=o;const n=o.headers.get("content-type");return n&&n.includes("application/json")?s=await o.json():n&&n.includes("text/")&&(s=await o.text()),s}catch(i){throw new Error(i.message)}}async function w(t,e,a,r,u=!0){var i;try{const o={method:r?"PATCH":"POST",headers:e,body:a?JSON.stringify(a):void 0},s=await fetch(t,o);if(!s.ok){let d=s.statusText;const l=s.headers.get("content-type");if(l&&l.includes("application/json")){const m=await s.json();d=((i=m.error)==null?void 0:i.message)||m.message||s.statusText}else l&&l.includes("text/")&&(d=await s.text());if(!u)return{error:d};throw new Error(d)}let n=s;const c=s.headers.get("content-type");return c&&c.includes("application/json")?n=await s.json():c&&c.includes("text/")&&(n=await s.text()),n}catch(o){throw new Error(o.message)}}function U(t){const e=t.match(/https?:\/\/([^/]+)\/?/i);let a="";return e&&e[1]&&(a=e[1]),a}const K=/[a-zA-Z0-9_\u0392-\u03C9\u00C0-\u00FF\u0600-\u06FF\u0400-\u04FF]+|[\u4E00-\u9FFF\u3400-\u4DBF\uF900-\uFAFF\u3040-\u309F\uAC00-\uD7AF]+/g;function A(t){const e=t.match(K);let a=0;if(!e)return 0;for(let r=0;r<e.length;r++)e[r].charCodeAt(0)>=19968?a+=e[r].length:a+=1;return a}function B(t){t=t.replace(/,+,/g,", ");const e=/<img src="(.+)" \/>/g;t=t.replace(e,"![$1]($1)");const a=/<a href="(.+)">(.+)<\/a>/g;return t=t.replace(a,"[$2]($1)"),t=t.replace(/!\[.+?\]\(.+?\)/g,""),t=t.replace(/<(?:.|\n)*?>/gm,""),t=t.replace(/<\/(?:.|\n)*?>/gm,""),t=t.replace(/#+\s/g,""),t=t.replace(/\s+/g," "),t=t.replace(/\n{2,}/g,`
`),t=t.trim(),t}function H(t,e){let a=t;if(t&&Object.keys(e).length)for(const r in e)a=a.replace(`{${r}}`,e[r]);return a}async function M(t,e={"User-Agent":j}){let a="",r="",u=t.webUrl;const i={domain:$,website:"Github"},o=/https:\/\/github.com\/([^\/]*\/[^\/]*)/g.exec(u),s=o?o[1]:"";try{if(s){const n=await I(`${P}/${s}`,e),c=await I(`${P}/${s}/languages`,e),d=await I(`${q}/${s}/${n.default_branch}/README.md`,e,void 0,!1),l=d.error?"":d,m=n.description?n.description.replace(/:\w+:/g," "):"";a=n.full_name+(m?`: ${m}`:""),u=n.html_url;const p=n.topics;p&&p.length>0&&(i.tags=p),c&&(i.languages=Object.keys(c));const f=t.picBed||N;if(f){const y=n.owner.login,g=n.name,h={username:y,reponame:g,stargazers_count:n.stargazers_count,language:n.language,issues:n.open_issues_count,forks:n.forks_count,description:m},b=`${f}/github`,_=await w(b,{...e,"Content-Type":"application/json"},h);i.cover=_.url}r=`${a}

${l}`}else return{error:"Github error: Not supported website."};return{data:{title:a,url:u,content:r,meta:i}}}catch(n){return{error:`Github error: ${n}`}}}async function z(t,e={"User-Agent":j}){var a;let r="",u="";const i=t.webUrl,o={domain:S,website:"Twitter"},s=/https:\/\/twitter.com\/([^\/]*\/status\/[^\?]*)/g.exec(i),n=s?s[1]:"",c=n.split("/")[2],d=t.webHub||V;try{if(n&&d){const l=(await I(`${d}/twitter/tweet/${n}/original=true`,e)).item;l.forEach(p=>{var f,y;let g=p.full_text;if((f=p.entities)!=null&&f.urls&&p.entities.urls.forEach(h=>{g=g.replace(h.url,h.expanded_url),p.full_text=g}),p.quoted_status){let h=p.quoted_status.full_text;(y=p.quoted_status.entities)!=null&&y.urls&&p.quoted_status.entities.urls.forEach(b=>{h=h.replace(b.url,b.expanded_url),p.quoted_status.full_text=h}),u+=`${p.quoted_status.user.name}: ${h}
${p.user.name}: ${g}
`}else u+=`${p.user.name}: ${g}
`});const m=l.find(({id_str:p})=>p===c);if(m){const p=m.user,f=p.name,y=p.screen_name;r=`Twitter · ${f} @${y}`;const g=t.picBed||N;if(g){const b=p.profile_image_url_https.replace("_normal",""),_=m.full_text,O=new Date(m.created_at).toUTCString(),k={name:f,screenName:y,avator:b,content:_,status:c,pubTime:O},F=`${g}/twitter`,L=await w(F,{...e,"Content-Type":"application/json"},k);o.cover=L.url}const h=(a=m.entities)==null?void 0:a.hashtags;h&&(o.tags=h.map(b=>b.text))}}else return{error:"Twitter error: Not supported website."};return{data:{title:r,url:i,content:u,meta:o}}}catch(l){return{error:`Twitter error: ${l}`}}}const $="github.com",S="twitter.com",V={}.VITE_STAR_NEXUS_HUB_API,R={}.VITE_GITHUB_API_HOST||"https://api.github.com",P=`${R}/repos`,q={}.VITE_GITHUB_RAW_HOST||"https://raw.githubusercontent.com",N={}.VITE_PICTURE_BED,T={}.VITE_NOTION_API_URL||"https://api.notion.com/v1",G={}.VITE_OPENAI_API_HOST||"https://api.openai.com/v1",W=2048,x=`Please summarize content within 300 words and then classify it to 1-5 types of classification. Classification names should be short and no explanation or description is needed. Separate the classification names with "#", not other symbols.
Start the summary with "Summary:". Start the types classification with "Classification:". Return the summary first and then the types of classification. The format is as follows:

Summary: This is the summary content. // must start with Summary:
Classification: XXX#YYY#ZZZ // must start with Classification:
`,X=`The Content is:
=====
{content}
=====
{language}`,Z={en:"Please answer in English.","zh-CN":"请用中文回答。"},j="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Safari/605.1.15",v={[$]:{loader:M},[S]:{loader:z}};async function Y(t,e){let a={};const r=U(t.webUrl);return v[r]?a=await v[r].loader(t,e):a.error="StarNexus error: Not supported website.",a}async function J(t,e,a="en"){try{let r="",u="",i=e.content;i=B(i);const o=A(i);if(o>40){const n=A(x),c=W-n;o>c&&(i=i.substring(0,i.length-(o-c)));const d={content:i,language:Z[a]},l=H(X,d);let m=(await w(`${G}/chat/completions`,{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},{model:"gpt-3.5-turbo",messages:[{role:"system",content:x},{role:"user",content:l}],max_tokens:800,temperature:.4})).choices[0].message.content;m=m.replace(/\n/g,"");const p=/Summary:(.*)Classification:/g,f=/Classification:(.*)$/g,y=p.exec(m),g=f.exec(m);y&&(r=y[1].trim()),g&&(u=g[1].trim())}else r=i;const s=(u||"Others").split("#");return{data:{summary:r,categories:s}}}catch(r){return{error:`Openai API error: ${r}`}}}async function D(t,e){try{let a=[{name:"Others"}];a=e.categories.map(n=>(n=n.trim(),n.endsWith(".")&&(n=n.slice(0,-1)),{name:n}));const r={parent:{database_id:e.databaseId},properties:{Title:{title:[{text:{content:e.title}}]},Summary:{rich_text:[{text:{content:e.summary}}]},URL:{url:e.url},Categories:{multi_select:a},Status:{select:{name:"Starred"}}}};let u="";if(e.meta&&Object.keys(e.meta).length>0){const n=e.meta;if(n.cover&&(u=n.cover,r.properties={...r.properties,Cover:{url:u}}),r.properties={...r.properties,Website:{select:{name:n.website}}},e.meta.domain===$){const c=n;if(c.languages){const d=c.languages.map(l=>({name:l}));r.properties={...r.properties,Languages:{multi_select:d}}}if(c.tags){const d=c.tags.map(l=>({name:l}));r.properties={...r.properties,Tags:{multi_select:d}}}}else if(e.meta.domain===S){const c=n;if(c.tags){const d=c.tags.map(l=>({name:l}));r.properties={...r.properties,Tags:{multi_select:d}}}}}const i=await w(`${T}/databases/${e.databaseId}/query`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${t}`},{filter:{property:"URL",rich_text:{contains:e.url}}});let o="",s=!1;if(i.results.length>0&&(i.results[0].properties.Status.select.name==="Starred"&&(s=!0),o=i.results[0].id),o)return r.properties={...r.properties,Status:{select:{name:s?"Unstarred":"Starred"}}},await w(`${T}/pages/${o}`,{Authorization:`Bearer ${t}`,"Notion-Version":"2022-06-28","Content-Type":"application/json"},r,!0),{data:{starred:!s,notionPageId:o}};if(u){const n={object:"block",image:{external:{url:u}}};r.children=[n]}return o=(await w(`${T}/pages`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${t}`},r)).id,{data:{starred:!s,notionPageId:o}}}catch(a){return{error:`Notion API error: ${a}`}}}async function C(t){chrome.tabs.query({active:!0,lastFocusedWindow:!0},e=>{e.length&&t.tabId&&e[0].id&&t.tabId!==e[0].id&&chrome.tabs.sendMessage(e[0].id,{action:"savedStatusToContent",data:t})}),t.tabId?chrome.tabs.sendMessage(t.tabId,{action:"savedStatusToContent",data:t}):chrome.tabs.query({active:!0,lastFocusedWindow:!0},e=>{e.length!==0&&e[0].id&&chrome.tabs.sendMessage(e[0].id,{action:"sendResponseToContent",data:t})})}chrome.runtime.onInstalled.addListener(async()=>{const t=await chrome.storage.sync.get(["notionApiKey","notionDatabaseId","openaiApiKey","pictureBed","webHub","uiLang","promptsLang"]),e=t.notionApiKey??"",a=t.notionDatabaseId??"",r=t.openaiApiKey??"",u=t.pictureBed??"",i=t.webHub??"",o=t.uiLang??"en",s=t.promptsLang??"en";await chrome.storage.sync.set({notionApiKey:e,notionDatabaseId:a,openaiApiKey:r,pictureBed:u,webHub:i,uiLang:o,promptsLang:s})});chrome.runtime.onMessage.addListener(async(t,e,a)=>{var u,i,o;const r=t.action;if(r==="saveToNotion")if(t.data){const s=(u=e.tab)==null?void 0:u.id,n=t.data;n.tabId=s,tt(n).then(c=>{C(c)}).catch(c=>{C(c)}),a({message:"handling save to notion"})}else a({message:"Error: request.data is undefined.",error:!0});else if(r==="checkStarred"){const s=(i=e.tab)==null?void 0:i.id,n=(o=t.data)==null?void 0:o.webUrl;n&&s&&et(n,s).then(c=>{E(c)}).catch(c=>{E(c)}),a({message:"checking"})}return!0});async function Q(t){try{let e="",a=["Others"];const r=await chrome.storage.sync.get(["notionApiKey","notionDatabaseId","openaiApiKey","promptsLang"]),u=r.notionApiKey??"",i=r.notionDatabaseId??"",o=r.openaiApiKey??"",s=r.promptsLang??"en";if(!u||!i)return{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:"Missing Notion API key or Database ID in settings."};if(o){const{data:l,error:m}=await J(o,t,s);if(m)return{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:m};l&&(e=l.summary,a=l.categories)}else e=t.content;const n={databaseId:i,title:t.title,summary:e,url:t.url,categories:a,status:"Starred",meta:t.meta},{data:c,error:d}=await D(u,n);return d?{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:d}:{tabId:t.tabId,starred:c.starred,notionPageId:c.notionPageId}}catch(e){return{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:e.message?e.message:"Error saving to Notion."}}}function tt(t){return new Promise((e,a)=>{Y(t).then(r=>{if(r.error)return a({tabId:t.tabId,notionPageId:t.notionPageId,starred:t.starred,error:r.error});Q({...r.data,tabId:t.tabId,notionPageId:t.notionPageId,starred:t.starred}).then(u=>e(u)).catch(u=>a(u))})})}async function E(t){t.tabId&&chrome.tabs.sendMessage(t.tabId,{action:"starredStatusToContent",data:t})}async function et(t,e){const a=await chrome.storage.sync.get(["notionApiKey","notionDatabaseId"]),r=a.notionApiKey??"",u=a.notionDatabaseId??"";let i=!1,o="";if(!r||!u)return{tabId:e,notionPageId:o,starred:i,error:"Missing Notion API key or Database ID in settings."};try{const s=await fetch(`https://api.notion.com/v1/databases/${u}/query`,{method:"POST",headers:{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${r}`},body:JSON.stringify({filter:{property:"URL",rich_text:{contains:t}}})});if(s.status!==200){const n=await s.json();let c="Notion API error: ";return n.message?c+=n.message:c+=s.status.toString(),{tabId:e,starred:i,notionPageId:o,error:c}}else{const n=await s.json();return n.results.length>0&&(n.results[0].properties.Status.select.name==="Starred"&&(i=!0),o=n.results[0].id),{tabId:e,starred:i,notionPageId:o}}}catch(s){return{tabId:e,starred:i,notionPageId:o,error:s.message?s.message:"Error check starred status."}}}
