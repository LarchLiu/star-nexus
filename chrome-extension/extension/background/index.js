async function l(t,e,a,n,c=!0){var d;try{const o={method:n?"PATCH":"POST",headers:e,body:a?JSON.stringify(a):void 0},r=await fetch(t,o);if(!r.ok){let u=r.statusText;const m=r.headers.get("content-type");if(m&&m.includes("application/json")){const h=await r.json();u=((d=h.error)==null?void 0:d.message)||h.message||r.statusText}else m&&m.includes("text/")&&(u=await r.text());if(!c)return{error:u};throw new Error(u)}let s=r;const i=r.headers.get("content-type");return i&&i.includes("application/json")?s=await r.json():i&&i.includes("text/")&&(s=await r.text()),s}catch(o){throw new Error(o.message)}}const I="github.com",p={}.VITE_NOTION_API_URL||"https://api.notion.com/v1",b={}.VITE_OPENAI_API_HOST||"https://api.openai.com/v1",f=`Summarize this Document first and then Categorize it. The Document is the *Markdown* format. In summary within 200 words. Categories with less than 5 items. Category names should be divided by a comma. Return the summary first and then the categories like this:

Summary: my summary.

Categories: XXX, YYY

The Document is: 

`;async function w(t,e){try{let a="",n="",c=(await l(`${b}/chat/completions`,{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},{model:"gpt-3.5-turbo",messages:[{role:"system",content:f},{role:"user",content:e.content}],max_tokens:400,temperature:.5})).choices[0].message.content;c=c.replace(/\n/g,"");const d=/Summary:(.*)Categories:/g,o=/Categories:(.*)$/g,r=d.exec(c),s=o.exec(c);r&&(a=r[1].trim()),s&&(n=s[1].trim());const i=(n||"Others").split(",");return{data:{summary:a,categories:i}}}catch(a){return{error:`Openai API error: ${a}`}}}async function A(t,e){try{let a=[{name:"Others"}];a=e.categories.map(i=>(i.endsWith(".")&&(i=i.slice(0,-1)),{name:i}));const n={parent:{database_id:e.databaseId},properties:{Title:{title:[{text:{content:e.title}}]},Summary:{rich_text:[{text:{content:e.summary}}]},URL:{url:e.url},Categories:{multi_select:a},Status:{select:{name:"Starred"}}}};let c="";if(e.meta&&Object.keys(e.meta).length>0&&e.meta.domain===I){const i=e.meta;if(n.properties={...n.properties,Website:{select:{name:e.meta.website}}},i.languages){const u=i.languages.map(m=>({name:m}));n.properties={...n.properties,Languages:{multi_select:u}}}if(i.tags){const u=i.tags.map(m=>({name:m}));n.properties={...n.properties,Tags:{multi_select:u}}}i.socialPreview&&(c=i.socialPreview)}const d=await l(`${p}/databases/${e.databaseId}/query`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${t}`},{filter:{property:"URL",rich_text:{contains:e.url}}});let o="",r=!1;if(d.results.length>0&&(d.results[0].properties.Status.select.name==="Starred"&&(r=!0),o=d.results[0].id),o)return n.properties={...n.properties,Status:{select:{name:r?"Unstarred":"Starred"}}},await l(`${p}/pages/${o}`,{Authorization:`Bearer ${t}`,"Notion-Version":"2022-06-28","Content-Type":"application/json"},n,!0),{data:{starred:!r,notionPageId:o}};if(o=(await l(`${p}/pages`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${t}`},n)).id,!c)return{data:{starred:!r,notionPageId:o}};const s={object:"block",type:"image",image:{type:"external",external:{url:c}}};return await l(`${p}/blocks/${o}/children`,{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${t}`},{children:[s]},!0),{data:{starred:!r,notionPageId:o}}}catch(a){return{error:`Notion API error: ${a}`}}}async function g(t){t.tabId?chrome.tabs.sendMessage(t.tabId,{action:"savedStatusToContent",data:t}):chrome.tabs.query({active:!0,currentWindow:!0},e=>{e.length!==0&&chrome.tabs.sendMessage(e[0].id,{action:"sendResponseToContent",data:t})})}chrome.runtime.onInstalled.addListener(async()=>{const t=await chrome.storage.sync.get(["notionApiKey","notionDatabaseId","openaiApiKey","pictureBed"]),e=t.notionApiKey??"",a=t.notionDatabaseId??"",n=t.openaiApiKey??"",c=t.pictureBed??"";await chrome.storage.sync.set({notionApiKey:e,notionDatabaseId:a,openaiApiKey:n,pictureBed:c})});chrome.runtime.onMessage.addListener(async(t,e,a)=>{var c,d;const n=t.action;if(n==="saveToNotion")if(t.data){const o=(c=e.tab)==null?void 0:c.id,r=t.data;r.tabId=o,S(r).then(s=>{g(s)}).catch(s=>{g(s)}),a({message:"handling save to notion"})}else a({message:"Error: request.data is undefined.",error:!0});else if(n==="checkStarred"){const o=(d=e.tab)==null?void 0:d.id,r=t.data.url;T(r,o).then(s=>{y(s)}).catch(s=>{y(s)}),a({message:"checking"})}return!0});async function P(t){try{let e="",a=["Others"];const n=await chrome.storage.sync.get(["notionApiKey","notionDatabaseId","openaiApiKey"]),c=n.notionApiKey??"",d=n.notionDatabaseId??"",o=n.openaiApiKey??"";if(!c||!d)return{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:"Missing Notion API key or Database ID in settings."};if(o){const{data:u,error:m}=await w(o,t);if(m)return{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:m};e=u.summary,a=u.categories}else e=t.content;const r={databaseId:d,title:t.title,summary:e,url:t.url,categories:a,status:"Starred",meta:t.meta},{data:s,error:i}=await A(c,r);return i?{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:i}:{tabId:t.tabId,starred:s.starred,notionPageId:s.notionPageId}}catch(e){return{tabId:t.tabId,starred:t.starred,notionPageId:t.notionPageId,error:e.message?e.message:"Error saving to Notion."}}}function S(t){return new Promise((e,a)=>{P(t).then(n=>{e(n)}).catch(n=>{a(n)})})}async function y(t){t.tabId&&chrome.tabs.sendMessage(t.tabId,{action:"starredStatusToContent",data:t})}async function T(t,e){const a=await chrome.storage.sync.get(["notionApiKey","notionDatabaseId"]),n=a.notionApiKey??"",c=a.notionDatabaseId??"";let d=!1,o="";if(!n||!c)return{tabId:e,notionPageId:o,starred:d,error:"Missing Notion API key or Database ID in settings."};try{const r=await fetch(`https://api.notion.com/v1/databases/${c}/query`,{method:"POST",headers:{"Content-Type":"application/json","Notion-Version":"2022-06-28",Authorization:`Bearer ${n}`},body:JSON.stringify({filter:{property:"URL",rich_text:{contains:t}}})});if(r.status!==200){const s=await r.json();let i="Notion API error: ";return s.message?i+=s.message:i+=r.status.toString(),{tabId:e,starred:d,notionPageId:o,error:i}}else{const s=await r.json();return s.results.length>0&&(s.results[0].properties.Status.select.name==="Starred"&&(d=!0),o=s.results[0].id),{tabId:e,starred:d,notionPageId:o}}}catch(r){return{tabId:e,starred:d,notionPageId:o,error:r.message?r.message:"Error check starred status."}}}
